%token id
%token int
%token float
%token if
%token (
%token )
%token {
%token }
%token else
%token while
%token assign
%token relop
%token addop
%token mulop
%token +
%token -
%token ;

letter	[a-zA-Z]
digit	[0-9]
id		{letter}{letter|digit}*	
digits	{digit}+
num		{digit}+|{digit}+"."{digits}{/*empty*/|"E"digits}
%%
METHOD_BODY:
	STATEMENT_LIST
;

STATEMENT_LIST:
	STATEMENT
|	STATEMENT_LIST STATEMENT
;

STATEMENT:
	DECLARATION
|	IF
|	WHILE
|	ASSIGNMENT
;

DECLARATION:
	PRIMITIVE_TYPE
|	id
|	;
;

PRIMITIVE_TYPE:
	int
|	float
;

IF:
	if
|	(
|	EXPRESSION
|	)
|	{
|	STATEMENT
|	}
|	else
|	{
|	STATEMENT
|	}
;

WHILE:
	while
|	(
|	EXPRESSION
|	)
|	{
|	STATEMENT
|	}
;

ASSIGNMENT:
	id
|	assign
|	EXPRESSION
|	;
;

EXPRESSION:
	SIMPLE_EXPRESSION
|	SIMPLE_EXPRESSION relop SIMPLE_EXPRESSION
;

SIMPLE_EXPRESSION:
	TERM
|	SIGN TERM
|	SIMPLE_EXPRESSION addop TERM
;

TERM:
	FACTOR
|	TERM mulop FACTOR
;

FACTOR:
	id
|	num
|	( EXPRESSION )
;

SIGN:
	+
|	-
